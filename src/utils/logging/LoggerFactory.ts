import { Platform } from 'react-native';
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Logger } from './Logger';
import { LoggerConfig, LogLevel } from './types';
import { ConsoleProvider, BetterStackProvider } from './providers';
import { config } from '../../config';

export interface LoggerFactoryConfig {
  enableConsole?: boolean;
  enableBetterStack?: boolean;
  betterStackToken?: string;
  betterStackEndpoint?: string;
  logLevel?: LogLevel;
  context?: Record<string, any>;
  userId?: string;
}

export class LoggerFactory {
  private static logger: Logger | null = null;

  public static async createLogger(options: LoggerFactoryConfig = {}): Promise<Logger> {
    const {
      enableConsole = config.enableLogging,
      enableBetterStack = config.environment === 'production' || config.environment === 'staging',
      betterStackToken = process.env.EXPO_PUBLIC_BETTERSTACK_TOKEN,
      betterStackEndpoint = process.env.EXPO_PUBLIC_BETTERSTACK_ENDPOINT,
      logLevel = config.enableDebugMode ? 'debug' : 'info',
      context,
      userId,
    } = options;

    const providers = [];

    // Add console provider
    if (enableConsole) {
      providers.push(new ConsoleProvider('PetTracker', true));
    }

    // Add BetterStack provider for remote logging
    if (enableBetterStack && betterStackToken) {
      providers.push(
        new BetterStackProvider({
          sourceToken: betterStackToken,
          endpoint: betterStackEndpoint,
          batchSize: 50,
          flushInterval: 5000,
        })
      );
    }

    const loggerConfig: LoggerConfig = {
      enableLogging: config.enableLogging,
      enableDebugMode: config.enableDebugMode,
      environment: config.environment,
      providers,
      context: {
        appVersion: '1.0.0', // TODO: Get from package.json or config
        platform: Platform.OS,
        platformVersion: Platform.Version?.toString(),
        environment: config.environment,
        ...context,
      },
      userId,
      sessionId: undefined, // Will be generated by Logger
      enableConsoleLog: enableConsole,
      enableRemoteLogging: enableBetterStack,
      logLevel,
      batchSize: 50,
      flushInterval: 5000,
    };

    this.logger = await Logger.initialize(loggerConfig);
    return this.logger;
  }

  public static getInstance(): Logger {
    if (!this.logger) {
      throw new Error('Logger not initialized. Call LoggerFactory.createLogger() first.');
    }
    return this.logger;
  }

  public static async createDevelopmentLogger(userId?: string): Promise<Logger> {
    return this.createLogger({
      enableConsole: true,
      enableBetterStack: false,
      logLevel: 'debug',
      userId,
      context: {
        isDevelopment: true,
      },
    });
  }

  public static async createProductionLogger(
    betterStackToken: string,
    userId?: string
  ): Promise<Logger> {
    return this.createLogger({
      enableConsole: false,
      enableBetterStack: true,
      betterStackToken,
      logLevel: 'info',
      userId,
      context: {
        isProduction: true,
      },
    });
  }

  public static async createTestingLogger(): Promise<Logger> {
    return this.createLogger({
      enableConsole: true,
      enableBetterStack: false,
      logLevel: 'warn',
      context: {
        isTesting: true,
      },
    });
  }

  public static async destroyLogger(): Promise<void> {
    if (this.logger) {
      await this.logger.destroy();
      this.logger = null;
    }
  }
}
